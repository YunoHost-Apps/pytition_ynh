#!/bin/bash

source _common.sh
source /usr/share/yunohost/helpers

email=$(ynh_user_get_info --username=$admin --key=mail)

if [[ "$email" == "admin_legacy" ]]; then
    ynh_die "Please select a regular user as admin of the app, NOT the admin user!" --ret_code=1
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Setting up source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir/pytition"

mkdir -p "$install_dir/static"
mkdir -p "$install_dir/mediaroot"

#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 750 "$install_dir"
#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod -R o-rwx "$install_dir"
#REMOVEME? Assuming the install dir is setup using ynh_setup_source, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown -R $app:www-data "$install_dir"
setfacl -dR -m g:"www-data":rX -m u:$app:rwX "$install_dir/mediaroot/"
setfacl -R -m g:"www-data":rX -m u:$app:rwX "$install_dir/mediaroot/"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression "Configuring NGINX web server..."

# Create a dedicated NGINX config
ynh_config_add_nginx

#=================================================
# SPECIFIC SETUP
#=================================================
# INSTALL PYTHON DEPENDENCIES
#=================================================
ynh_script_progression "Installing python dependencies..."

# Setup virtualenv and install dependencies
virtualenv --python=python3 --system-site-packages "${install_dir}/venv"
(
    set +o nounset
    source "${install_dir}/venv/bin/activate"
    set -o nounset

    python3 -m pip install --upgrade pip
    python3 -m pip install lxml_html_clean
    python3 -m pip install -r "$install_dir/pytition/requirements.txt"
)

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression "Adding $app's configuration..."

secret_key=$(generate_secret_key)

config_path="$install_dir/pytition/pytition/pytition/settings/config.py"
ynh_config_add --template="config.py" --destination="$config_path"

# FIXME: this should be handled by the core in the future
# You may need to use chmod 600 instead of 400,
# for example if the app is expected to be able to modify its own config
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 400 "$config_path"
#REMOVEME? Assuming the file is setup using ynh_config_add, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown $app:$app "$config_path"

ynh_config_add --template="uwsgi.yaml" --destination="$install_dir/uwsgi.yaml"
chmod 400 "$install_dir/uwsgi.yaml"
chown $app:$app "$install_dir/uwsgi.yaml"

#=================================================
# RUN APP CONFIGURATION
#=================================================
ynh_script_progression "Running app configuration..."

ynh_exec_as_app bash -c "
    set +o nounset
    source '$install_dir/venv/bin/activate'
    set -o nounset
    cd '$install_dir/pytition/pytition'
    export DJANGO_SETTINGS_MODULE=pytition.settings.config
    python3 manage.py migrate
    python3 manage.py collectstatic
    python3 manage.py compilemessages
    DJANGO_SUPERUSER_PASSWORD='$password' python3 manage.py createsuperuser --noinput --username $admin --email $email
"

chmod 750 "$install_dir/static"
chown -R $app:www-data "$install_dir/static"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression "Configuring $app's systemd service..."

# Create a dedicated systemd config
ynh_config_add_systemd

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression "Configuring log rotation..."

mkdir -p "/var/log/$app"
#REMOVEME? Assuming ynh_config_add_logrotate is called, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chmod 750 "/var/log/$app"
#REMOVEME? Assuming ynh_config_add_logrotate is called, the proper chmod/chowns are now already applied and it shouldn't be necessary to tweak perms | chown -R $app:www-data "/var/log/$app"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression "Integrating service in YunoHost..."

yunohost service add $app --description="Pytition uWSGI app $app" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

# Start a systemd service
ynh_systemctl --service=$app --action="start"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Installation of $app completed"
